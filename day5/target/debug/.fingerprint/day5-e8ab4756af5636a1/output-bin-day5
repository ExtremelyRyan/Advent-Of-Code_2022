{"message":"the type `std::string::String` cannot be indexed by `{integer}`","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src\\main.rs","byte_start":1596,"byte_end":1604,"line_start":68,"line_end":68,"column_start":33,"column_end":41,"is_primary":true,"text":[{"text":"            let amount: usize = words[1].parse().unwrap();","highlight_start":33,"highlight_end":41}],"label":"`std::string::String` cannot be indexed by `{integer}`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the trait `std::ops::Index<{integer}>` is not implemented for `std::string::String`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"the following other types implement trait `std::ops::Index<Idx>`:\n  <std::string::String as std::ops::Index<std::ops::Range<usize>>>\n  <std::string::String as std::ops::Index<std::ops::RangeFrom<usize>>>\n  <std::string::String as std::ops::Index<std::ops::RangeFull>>\n  <std::string::String as std::ops::Index<std::ops::RangeInclusive<usize>>>\n  <std::string::String as std::ops::Index<std::ops::RangeTo<usize>>>\n  <std::string::String as std::ops::Index<std::ops::RangeToInclusive<usize>>>\n  <str as std::ops::Index<I>>","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: the type `std::string::String` cannot be indexed by `{integer}`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\main.rs:68:33\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m68\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            let amount: usize = words[1].parse().unwrap();\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m`std::string::String` cannot be indexed by `{integer}`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mhelp\u001b[0m\u001b[0m: the trait `std::ops::Index<{integer}>` is not implemented for `std::string::String`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mhelp\u001b[0m\u001b[0m: the following other types implement trait `std::ops::Index<Idx>`:\u001b[0m\n\u001b[0m             <std::string::String as std::ops::Index<std::ops::Range<usize>>>\u001b[0m\n\u001b[0m             <std::string::String as std::ops::Index<std::ops::RangeFrom<usize>>>\u001b[0m\n\u001b[0m             <std::string::String as std::ops::Index<std::ops::RangeFull>>\u001b[0m\n\u001b[0m             <std::string::String as std::ops::Index<std::ops::RangeInclusive<usize>>>\u001b[0m\n\u001b[0m             <std::string::String as std::ops::Index<std::ops::RangeTo<usize>>>\u001b[0m\n\u001b[0m             <std::string::String as std::ops::Index<std::ops::RangeToInclusive<usize>>>\u001b[0m\n\u001b[0m             <str as std::ops::Index<I>>\u001b[0m\n\n"}
{"message":"the type `std::string::String` cannot be indexed by `{integer}`","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src\\main.rs","byte_start":1653,"byte_end":1661,"line_start":69,"line_end":69,"column_start":31,"column_end":39,"is_primary":true,"text":[{"text":"            let from: usize = words[3].parse::<usize>().unwrap() - 1; ","highlight_start":31,"highlight_end":39}],"label":"`std::string::String` cannot be indexed by `{integer}`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the trait `std::ops::Index<{integer}>` is not implemented for `std::string::String`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"the following other types implement trait `std::ops::Index<Idx>`:\n  <std::string::String as std::ops::Index<std::ops::Range<usize>>>\n  <std::string::String as std::ops::Index<std::ops::RangeFrom<usize>>>\n  <std::string::String as std::ops::Index<std::ops::RangeFull>>\n  <std::string::String as std::ops::Index<std::ops::RangeInclusive<usize>>>\n  <std::string::String as std::ops::Index<std::ops::RangeTo<usize>>>\n  <std::string::String as std::ops::Index<std::ops::RangeToInclusive<usize>>>\n  <str as std::ops::Index<I>>","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: the type `std::string::String` cannot be indexed by `{integer}`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\main.rs:69:31\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m69\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            let from: usize = words[3].parse::<usize>().unwrap() - 1; \u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m`std::string::String` cannot be indexed by `{integer}`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mhelp\u001b[0m\u001b[0m: the trait `std::ops::Index<{integer}>` is not implemented for `std::string::String`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mhelp\u001b[0m\u001b[0m: the following other types implement trait `std::ops::Index<Idx>`:\u001b[0m\n\u001b[0m             <std::string::String as std::ops::Index<std::ops::Range<usize>>>\u001b[0m\n\u001b[0m             <std::string::String as std::ops::Index<std::ops::RangeFrom<usize>>>\u001b[0m\n\u001b[0m             <std::string::String as std::ops::Index<std::ops::RangeFull>>\u001b[0m\n\u001b[0m             <std::string::String as std::ops::Index<std::ops::RangeInclusive<usize>>>\u001b[0m\n\u001b[0m             <std::string::String as std::ops::Index<std::ops::RangeTo<usize>>>\u001b[0m\n\u001b[0m             <std::string::String as std::ops::Index<std::ops::RangeToInclusive<usize>>>\u001b[0m\n\u001b[0m             <str as std::ops::Index<I>>\u001b[0m\n\n"}
{"message":"the type `std::string::String` cannot be indexed by `{integer}`","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src\\main.rs","byte_start":1722,"byte_end":1730,"line_start":70,"line_end":70,"column_start":29,"column_end":37,"is_primary":true,"text":[{"text":"            let to: usize = words[5].parse::<usize>().unwrap() - 1; ","highlight_start":29,"highlight_end":37}],"label":"`std::string::String` cannot be indexed by `{integer}`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the trait `std::ops::Index<{integer}>` is not implemented for `std::string::String`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"the following other types implement trait `std::ops::Index<Idx>`:\n  <std::string::String as std::ops::Index<std::ops::Range<usize>>>\n  <std::string::String as std::ops::Index<std::ops::RangeFrom<usize>>>\n  <std::string::String as std::ops::Index<std::ops::RangeFull>>\n  <std::string::String as std::ops::Index<std::ops::RangeInclusive<usize>>>\n  <std::string::String as std::ops::Index<std::ops::RangeTo<usize>>>\n  <std::string::String as std::ops::Index<std::ops::RangeToInclusive<usize>>>\n  <str as std::ops::Index<I>>","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: the type `std::string::String` cannot be indexed by `{integer}`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\main.rs:70:29\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m70\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            let to: usize = words[5].parse::<usize>().unwrap() - 1; \u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m`std::string::String` cannot be indexed by `{integer}`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mhelp\u001b[0m\u001b[0m: the trait `std::ops::Index<{integer}>` is not implemented for `std::string::String`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mhelp\u001b[0m\u001b[0m: the following other types implement trait `std::ops::Index<Idx>`:\u001b[0m\n\u001b[0m             <std::string::String as std::ops::Index<std::ops::Range<usize>>>\u001b[0m\n\u001b[0m             <std::string::String as std::ops::Index<std::ops::RangeFrom<usize>>>\u001b[0m\n\u001b[0m             <std::string::String as std::ops::Index<std::ops::RangeFull>>\u001b[0m\n\u001b[0m             <std::string::String as std::ops::Index<std::ops::RangeInclusive<usize>>>\u001b[0m\n\u001b[0m             <std::string::String as std::ops::Index<std::ops::RangeTo<usize>>>\u001b[0m\n\u001b[0m             <std::string::String as std::ops::Index<std::ops::RangeToInclusive<usize>>>\u001b[0m\n\u001b[0m             <str as std::ops::Index<I>>\u001b[0m\n\n"}
{"message":"aborting due to 3 previous errors","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: aborting due to 3 previous errors\u001b[0m\n\n"}
{"message":"For more information about this error, try `rustc --explain E0277`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;15mFor more information about this error, try `rustc --explain E0277`.\u001b[0m\n"}
